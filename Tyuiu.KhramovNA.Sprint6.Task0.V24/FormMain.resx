<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBoxFormula.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAeAB4AAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsN
        DhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQU
        FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCAAzAM8DASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9I6KKK9A8QKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
        iigAorP8QSalHod82jxQTaqsLm1junKRNJg7QzAEgZxkgGuD0fxd4hf4sReH3ns9V0r+zTc3skAVWsZs
        gRpwcuH/AHnPGPL96Tdi1FtXPTKKzNa8Sab4dh83UbpbWPaWLMCcKBkk4HAHqai8PeL9I8Vi5Ok3q3gt
        3CSlVYBSVDAcgZ4IPHrRdCs7XsbFFZPizXh4X8L6vrDRecun2kt0Y843BELY/So/BPiRfGXgzQNfSI26
        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
        AooooAKKKKACiiigAooooAKKKKAP/9k=
</value>
  </data>
</root>